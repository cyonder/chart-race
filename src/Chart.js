import React, { useState } from 'react'
import useInterval from './useInterval'
import './normalize.css'
import './chart.css'

function Chart(props) {
	const {
		data: fileData,
		options: {
			duration = 1000,
			numberOfBars,
			showLegend: isLegendVisible = true
		},
		colors
	} = props.config

	const [isRunning, setIsRunning] = useState(true)

	const [index, setIndex] = useState(0)

	const [data, setData] = useState(() => {
		if (fileData === undefined || Object.entries(fileData).length === 0) {
			setIsRunning(false)
			console.error('Missing or Empty "data" property!')
			return
		}
		// Sort the entire data by the year property in ascending order
		const clonedData = [...fileData]
		clonedData.sort((a, b) => a.year - b.year)

		// Sort the entire data property by the value in descending order
		clonedData.forEach(({ data }) => {
			data.sort((a, b) => b.value - a.value)
		})
		return clonedData
	})

	const [categories, setCategories] = useState(() => {
		const allCategories = data.map(({ data }) => data.map(({ category }) => category))
															.reduce((acc, curr) => [...acc, ...curr], [])
		return [... new Set(allCategories)]
	})

	const [timeline, setTimeline] = useState(() => {
		return data.map(item => item.year)
	})

	const [colorPalette, setcolorPalette] = useState(() => {
		const categoriesLength = categories.length
		const colorsLength = colors.length
		const numberOfMissingColors = categoriesLength - colorsLength

		if(numberOfMissingColors > 0){
			console.error(`${numberOfMissingColors} colors are missing for the categories. Missing colors will be autogenerated!`)
			let newColors = []
			for(let i = 0; i < numberOfMissingColors; i++){
				let newColor = '#' + ("000000" + Math.random().toString(16).slice(2, 8).toUpperCase()).slice(-6)
				newColors.push(newColor)
			}
			return [...colors, ...newColors]
		}
		return colors
	})

	useInterval(() => {
		const yearsLength = Object.keys(fileData).length
		if (index === yearsLength - 1) {
			setIsRunning(false)
			return
		}
		setIndex(index + 1)
	}, isRunning ? duration : null)
	
	return (
		<div className="chart">
			{ isLegendVisible &&
			<ChartHeader colors={colorPalette}
									 categories={categories}
									 numberOfBars={numberOfBars} /> }
			<ChartBody 	 data={data}
								 	 currentIndex={index}
								 	 numberOfBars={numberOfBars}
								 	 colors={colorPalette}
								 	 categories={categories} />
			<ChartFooter isRunning={isRunning}
									 setIsRunning={setIsRunning} />
		</div>
	)
}

function ChartHeader({ colors, categories, numberOfBars }) {
	const listOfCategories = categories.slice(0, numberOfBars).map((category, i) => {
		return (
			<div key={i} className="chart__category">
				<div className="chart__category-color" style={{backgroundColor: colors[i]}}></div>
				<div className="chart__category-text">{category}</div>
			</div>
		)
	})

	return (
		<div className="chart__header">
			<div className="chart__categories">{listOfCategories}</div>
		</div>
	)
}

function ChartBody({ data, currentIndex, numberOfBars, colors, categories }) {
	const currentData = data[currentIndex].data.slice(0, numberOfBars)
	const highestValue = currentData[0].value
	
	const listOfBars = currentData.map((item, i) => {
		const barColor = colors[categories.indexOf(item.category)]
		return (
			<Bar key={i}
					 label={item.label}
					 value={item.value}
					 highestValue={highestValue}
					 barColor={barColor} />
		)
	})

	return (
		<div className="chart__body">
			<div className="chart__bars">{listOfBars}</div>
		</div>
	)
}

function ChartFooter({ isRunning, setIsRunning }) {
	return (
		<div className="chart__footer">
			<button onClick={() => setIsRunning(!isRunning)}>
				{isRunning ? 'Stop' : 'Start'}
			</button>
		</div>
	)
}

function Bar({ label, value, highestValue, barColor }) {	
	const width = Math.round((value / highestValue) * 100)
	const rectStyles = {
		width: `${width}%`,
		backgroundColor: barColor
	}

	return (
		<div className="chart__bar">
			<div className="chart__bar-label">{label}</div>
			<div className="chart__bar-value">
				<div className="chart__bar-rect" style={rectStyles}>{value}</div>
			</div>
		</div>
	)
}

export default Chart